/////////////////////////////////////////
//
// JDBC 
//
/////////////////////////////////////////
: DB Server에 data(sql 문) 처리 요청을 위한 프로그램


1.driver 설치
<mysql>
- mm.mysql-2.0.4-bin.jar ===> www.mysql.com에 가면 구할수 있다.
- JAVA_HOME/jre/lib/ext에 가져다 놓거나 classpath를 설정해준다.

<oracle> 
- ojdb14.jar ==>  oracle이 설치된 디렉토리에 있다.
ex)  C:\oraclexe\app\oracle\product\10.2.0\server\jdbc\lib

- JAVA_HOME/jre/lib/ext에 가져다 놓거나 classpath를 설정해준다.

<acces 또는 MSSQL>
- JdbcOdbcDriver ==> jdk에 기본적으로 내장되어있다.
- rt.jar를 풀어보면 sun/jdbc/obdc/JdbcOdbcDriver.class
- ODBC원본 관리자에 DB소스가 등록되어있어야 한다.

<DB2>
- db2jcc4.jar ==> DB2 설치된 디렉토리에 있다.


2. JDBC Program 
//////////////PreparedStatement 인 경우 /////////////

2-1. Driver 등록
   try{
	Class.forName("drivername");
   }catch(Exception e){
	System.out.println("driver를 찾을 수 없습니다");
   }
   /**
     Driver Name
     oracle		   :     oracle.jdbc.driver.OracleDriver
     mysql		   :     com.mysql.cj.jdbc.Driver
     odbc(ms_sql)  :     sun.jdbc.odbc.JdbcOdbcDriver
     db2(IBM)	   :     com.ibm.db2.jdbc.app.DB2Driver
   */
   
    Connection con  = null;
    PreparedStatement  stmt = null;
    ResultSet  rs   =null;
    try{
        //2-2. Connection 연결
	con = DriverManager.getConnecion(url, id, pass);
	/**
	oracle	-   jdbc:oracle:thin:@ip:1521:dbName
	mysql   -   jdbc:mysql://ip:3306/dbName?serverTimezone=UTC&useUniCode=yes&characterEncoding=UTF-8&useSSL=false
	odbc    -   jdbc:odbc:dbName
	db2(IBM)-   jdbc:db2:dbName
	*/
	//2-3. Query 생성

 
	//PreparedStatement
	 stmt  = con.prepareStatement(String sql);

	//Data setting
        stmt.setXXX(int ?위치 , value); //setXXX => setInt, set... => setTypename

        //2-3. Query 수행 (DB서버에게 쿼리 요청 ) 
	rs = stmt.executeQuery();	//select
	int row =stmt.executeUpdate();  //insert, delete, update

	//2-4. 결과 처리
	// rs.next() => 결과의 데이터가 있으면 true, 없으면 false를 리턴
	while(rs.next()) {
	  //1번 field의 값을 String 형태로 가져옴
	  String s = rs.getString(1);

          String s = rs.getString("fieldName");
	}
    }catch(Exception e){
    }finally{
	//2-5. 사용한 자원 반납
	if(rs!=null)	try{rs.close();}catch(Excepion e1){}
	if(stmt!=null)	try{stmt.close();}catch(Excepion e1){}
	if(con!=null)	try{con.close();}catch(Excepion e1){}
    }


/////////////////CallableStatement///////////////
2-1. Driver 등록
   try{
	Class.forName("drivername");
   }catch(Exception e){
	System.out.println("driver를 찾을 수 없습니다");
   }
   /**
     Driver Name
     oracle		:     oracle.jdbc.driver.OracleDriver
     mysql		:     org.gjt.mm.mysql.Driver
     odbc(ms_sql)	:     sun.jdbc.odbc.JdbcOdbcDriver
     db2(IBM)	        :     com.ibm.db2.jdbc.app.DB2Driver
   */
   
    Connection con  = null;
    PreparedStatement  stmt = null;
    ResultSet  rs   =null;
    try{
        //2-2. Connection 연결
	con = DriverManager.getConnecion(url, id, pass);
	/**
	oracle	-   jdbc:oracle:thin:@ip:1521:dbName
	mysql   -   jdbc:mysql://ip:3306/dbName
	odbc    -   jdbc:odbc:dbName
	db2(IBM)-   jdbc:db2:dbName
	*/
	//2-3. Query 생성
	//CallableStatement 인 경우
         stmt = con.prepareCall(String sql);

	//Data setting

	//in 데이타 셋팅 
        stmt.setXXX(int ?위치 , value);

        //out 데이타 받기 위한 셋팅 
	//stmt.registerOutParameter(int ?위치 , type);

        //2-3. Query 수행 (DB서버에게 쿼리 요청 ) 
	stmt.execute();

	//2-4. 결과 처리  
	  String s = rs.getString(int out데이타 위치 );
	}
    }catch(Exception e){
    }finally{
	//2-5. 사용한 자원 반납
	if(rs!=null)	try{rs.close();}catch(Excepion e1){}
	if(stmt!=null)	try{stmt.close();}catch(Excepion e1){}
	if(con!=null)	try{con.close();}catch(Excepion e1){}
    }